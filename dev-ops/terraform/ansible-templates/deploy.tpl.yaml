- name: Run docker
  hosts: ${HOST_NAME}
  gather_facts: true
  tasks:
    - name: Query for existence of docker apt source file
      ansible.builtin.stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_apt_src

    - name: Apt update/upgrade and install docker
      become: true
      block:
        - name: Update apt cache and upgrade OS packages
          ansible.builtin.apt:
            update_cache: true
            upgrade: dist
          changed_when: false
          when: not docker_apt_src.stat.exists

        - name: Install OS packages
          ansible.builtin.apt:
            pkg:
              - git
              - curl
              - ca-certificates
              - gnupg
              - apt-transport-https
              - python3-pip
              - virtualenv
              - python3-setuptools
          changed_when: false
          when: not docker_apt_src.stat.exists

        - name: Add Docker GPG apt Key
          ansible.builtin.shell: |
            set -o pipefail

            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg

            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |
                tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
          register: docker_install_repo
          changed_when: docker_install_repo.rc != 0
          when: not docker_apt_src.stat.exists

        - name: Install docker
          ansible.builtin.apt:
            pkg:
              - docker-ce
              - docker-ce-cli

        - name: Change permission of the docker socket
          ansible.builtin.file:
            path: /var/run/docker.sock
            mode: "0666"

    - name: Install Docker Module for Python
      ansible.builtin.pip:
        name: docker

    - name: Create app deploy directory
      ansible.builtin.file:
        path: ${APP_DEPLOY_ROOT}
        state: directory
        mode: "0755"

    - name: Copy environment file to host
      ansible.builtin.copy:
        src: ${ENV_FILENAME_TEMPORARY}
        dest: ${ENV_FILENAME}
        mode: "0600"
        owner: ubuntu
        group: ubuntu

    - name: Stop container if running
      ansible.builtin.command:
        chdir: ${APP_DEPLOY_ROOT}
        argv:
          - docker
          - stop
          - ${CONTAINER_NAME}
      changed_when: false
      failed_when: false

    - name: Remove the container so we can reuse the name
      ansible.builtin.command:
        chdir: /home/ubuntu/elixir-phoenix-terraform
        argv:
          - docker
          - rm
          - ${CONTAINER_NAME}
      changed_when: false
      failed_when: false

    - name: Log into docker registry
      community.docker.docker_login:
        username: ${CONTAINER_REGISTRY_USER_NAME}
        password: ${CONTAINER_REGISTRY_PASSWORD}

    - name: Pull docker image
      community.docker.docker_image:
        name: ${CONTAINER_IMAGE_NAME}
        source: pull

    - name: Run Docker container  # noqa example suppress lint warning
      ansible.builtin.command:
        chdir: ${APP_DEPLOY_ROOT}
        argv:
          - docker
          - run
          - -d
          - --name
          - ${CONTAINER_NAME}
          - -p
          - ${DOCKER_PUBLISHED_SERVER_LISTEN_PORT}:${PORT}
          - -p
          - ${DOCKER_PUBLISHED_SERVER_LISTEN_HTTP_PORT}:${HTTP_PORT}
          - --env-file=${ENV_FILENAME}
          - ${CONTAINER_IMAGE_NAME}
      register: docker_run
      changed_when: docker_run.rc != 0
